library(readr)
messages <- read_csv("C:/Users/Joset/OneDrive - Universidad APEC - Académico/DiplomadoCienciaDatos/R/ShinyDemo/MyShinyDashBoard/messages.csv")
View(messages)
install.packages("caret")
library(caret)
install.packages("RJDBC")
library(RJDBC)
shiny::runApp()
runApp()
driver <-(driverClass = "oracle.jdbc.OracleDriver",
"c:/drivers/oracle/ojdbc7.jar")
driver <-(driverClass = "oracle.jdbc.OracleDriver",
"c:/drivers/oracle/ojdbc7.jar")
driver <-(driverClass = "oracle.jdbc.OracleDriver",
"c:/drivers/oracle/ojdbc7.jar")
driver <-JDBC(driverClass = "oracle.jdbc.OracleDriver",
"c:/drivers/oracle/ojdbc7.jar")
conexion_oracle <- dbConnect(driver,
"jdbc:oracle:thin:@127.0.0.1:1521:orcl","hr","hr")
conexion_oracle <- dbConnect(driver,
"jdbc:oracle:thin:@127.0.0.1:1521:xe","hr","hr")
consulta_esquema_hr <-
dbReadTable(conexion_oracle,"EMPLOYEES")
consulta_esquema_hr
View(consulta_esquema_hr)
head(consulta_esquema_hr)
head(consulta_esquema_hr)
head(consulta_esquema_hr)
head(consulta_esquema_hr)
tail(consulta_esquema_hr)
install.packages("RODBC")
library(RODBC)
con = odbcConnect("Conexion_Oracle_RStudio", uid="hr", pwd="hr")
file.choose()
file.choose()
fuenteDatos <- read.csv("C:\\Users\\Joset\\OneDrive - Universidad APEC - Académico\\DiplomadoCienciaDatos\\R\\ExamenFinal\\rentadebicis.csv")
View(fuenteDatos)
resumenDeDatos <- summary(fuenteDatos)
resumenDatos
resumenDeDatos
pl(fuenteDatos$temperatura,fuenteDatos$rentas_totales, main="Renta de bicicletas en funcion de la temperatura", xlab="Temperatura",
xlab="TotalRentas")
plot(fuenteDatos$temperatura,fuenteDatos$rentas_totales, main="Renta de bicicletas en funcion de la temperatura", xlab="Temperatura",
xlab="TotalRentas")
plot(fuenteDatos$temperatura,fuenteDatos$rentas_totales, main="Renta de bicicletas en funcion de la temperatura", xlab="Temperatura",ylab="TotalRentas")
regresion <- lm(rentas_totales ~ hora + dia + mes + año + estacion + dia_semana + asueto + sensacion_termina +
humedad + velocidad_viento, data= fuenteDatos)
summary(regresion)
regresion <- lm(rentas_totales ~ hora + dia + mes + año + estacion + dia_semana + asueto + sensacion_termina +
humedad + velocidad_viento, data= fuenteDatos)
resumenDeDatos
regresion <- lm(rentas_totales ~ hora + dia + mes + año + estacion + dia_de_la_semana + asueto + sensacion_termina +
humedad + velocidad_del_viento, data= fuenteDatos)
summary(regresion)
regresion <- lm(rentas_totales ~ hora + dia + mes + año + estacion + dia_de_la_semana + asueto + sensacion_termica +
humedad + velocidad_del_viento, data= fuenteDatos)
summary(regresion)
regresion <- lm(rentas_totales ~ hora + mes + año + sensacion_termica +
humedad + velocidad_del_viento, data= fuenteDatos)
summary(regresion)
nuevosDatos <- data.frame(hora=12, mes=1, año=2013, sensasion_termica=24, humedad=62,velocidad_del_viento=13)
predict(regresion,nuevosDatos)
nuevosDatos <- data.frame(hora=12, mes=1, año=2013, sensacion_termica=24, humedad=62,velocidad_del_viento=13)
predict(regresion,nuevosDatos)
nuevosDatos <- data.frame(hora=12, mes=12, año=2013, sensacion_termica=24, humedad=62,velocidad_del_viento=13)
predict(regresion,nuevosDatos)
predict(regresion,nuevosDatos)
plot(regresion)
install.packages("tidyverse")
library(tidyverse)
install.packages("boot")
library(boot)
install.packages("car")
library(car)
install.packages("QuantPsyc")
library(QuantPsyc)
library(readxl)
sales <- read_excel("C:/Users/Joset/OneDrive - Universidad APEC - Académico/DiplomadoCienciaDatos/R/ExamenFinal/sales.xlsx")
View(sales)
attach(sales)
names(sales)
class(ventas)
class(Publicidad)
sales
modelo <- lm(ventas ~ Publicidad, data = sales, na.action = na.exclude)
summary(modelo)
grafica = ggplot(sales, aes(Publicidad,ventas))
grafica + geom_point() + geom_smooth(method = "lm", colour="red")
library(RODBC)
conexionBD <- odbcConnect("ConexionSQLServer")
conexionBD <- odbcConnect("ConexionSQLServer")
sqlFetch(conexionBD, "cars")
x <- data.frame(sqlFetch(conexionBD, "cars"))
View(x)
data(x)
View(x)
x
regresion_lineal <- lm(price ~ brand + model + year + title_status + millage +
color + vin, data = x)
summary(regresion_lineal)
summary(regresion_lineal)
regresion_lineal2 <- lm(price ~ vin + lot + state + country , data = x)
summary(regresion_lineal2)
regresion_lineal2 <- lm(price ~ state + country , data = x)
summary(regresion_lineal2)
regresion_lineal <- lm(price ~ brand + model + year + title_status + millage +
color, data = x)
summary(regresion_lineal)
Datos <- data.frame(brand="ford", model="door", year=2015, title_status="clean vehicle",
color="black")
predict(regresion_lineal,Datos)
Datos <- data.frame(brand="ford", model="door", year=2015, title_status="clean vehicle",
millage = 35000,color="black")
predict(regresion_lineal,Datos)
Datos <- data.frame(brand="ford", model="door", year=2015, title_status="clean vehicle",
millage < 35000,color="black")
Datos <- data.frame(brand="ford", model="door", year=2015, title_status="clean vehicle",
millage <= 35000,color="black")
Datos <- data.frame(brand="ford", model="door", year=2015, title_status="clean vehicle",
millage = 50000,color="black")
predict(regresion_lineal,Datos)
Datos <- data.frame(brand="ford", model="door", year=2015, title_status="clean vehicle",
millage >= 350000,color="black")
predict(regresion_lineal,Datos)
Datos <- data.frame(brand="ford", model="door", year=2015, title_status="clean vehicle",
millage > 350000 || millage < 500000,color="black")
Datos <- data.frame(brand="ford", model="door", year=2015, title_status="clean vehicle",
millage = 100000,color="black")
predict(regresion_lineal,Datos)
Datos <- data.frame(brand="ford", model="door", year=2015, title_status="clean vehicle",
millage = 100000,color="white")
predict(regresion_lineal,Datos)
Datos <- data.frame(brand="ford", model="door", year=2018, title_status="clean vehicle",
millage = 100000,color="black")
predict(regresion_lineal,Datos)
grafica = ggplot(x, aes(brand,price))
grafica + geom_point() + geom_smooth(method = "lm", colour="red")
grafica = ggplot(x, aes(brand,price))
grafica = ggplot(x, aes(brand,price))
library(ggplot2)
grafica = ggplot(x, aes(brand,price))
grafica + geom_point() + geom_smooth(method = "lm", colour="red")
grafica = ggplot(x, aes(year,price))
grafica + geom_point() + geom_smooth(method = "lm", colour="red")
grafica = ggplot(x, aes(year + millage,price))
grafica + geom_point() + geom_smooth(method = "lm", colour="red")
grafica = ggplot(x, aes(year,price))
grafica + geom_point() + geom_smooth(method = "lm", colour="red")
grafica = ggplot(x, aes(millage,price))
grafica + geom_point() + geom_smooth(method = "lm", colour="red")
grafica = ggplot(x, aes(millage,price))
grafica + geom_point() + geom_smooth(method = "lm", colour="red")
grafica = ggplot(x, aes(year,price))
grafica + geom_point() + geom_smooth(method = "lm", colour="red")
grafica = ggplot(x, aes(year + millage,price))
grafica + geom_point() + geom_smooth(method = "lm", colour="red")
grafica = ggplot(x, aes(millage,price))
grafica + geom_point() + geom_smooth(method = "lm", colour="red")
library(tidyverse)
attendance <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-04/attendance.csv")
standings <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-04/standings.csv")
View(attendance)
setwd("C:/Users/Joset/OneDrive - Universidad APEC - Académico/DiplomadoCienciaDatos/R/ExamenFinal")
sqlFetch(conexionBD, "attendance")
library(RODBC)
conexionBD <- odbcConnect("ConexionSQLServer")
sqlFetch(conexionBD, "attendance")
sqlFetch(conexionBD, "attendance")
attendance <- data.frame(sqlFetch(conexionBD, "cars"))
View(attendance)
library(knitr)
library(tidyverse)
library(silgelib)
install.packages("silgelib")
install.packages("installr")
library(installr)
updateR()
updateR()
install.packages("silgelib")
conexionBD <- odbcConnect("ConexionSQLServer")
library(RODBC)
library(tidyverse)
conexionBD <- odbcConnect("ConexionSQLServer")
sqlFetch(conexionBD, "attendance")
attendance <- data.frame(sqlFetch(conexionBD, "cars"))
View(attendance)
attendance <- data.frame(sqlFetch(conexionBD, "cars"))
attendance <- data.frame(sqlFetch(conexionBD, "attendance"))
View(attendance)
standings <- data.frame(sqlFetch(conexionBD, "standings"))
standings <- data.frame(sqlFetch(conexionBD, "standings"))
View(standings)
View(standings)
View(attendance)
attendance_join <- attendance %>%
left_join(standings,
by = c("team","team_name","team"))
attendance_join <- attendance %>%
left_join(standings,
by = c("year", "team_name", "team"))
attendance_join <- attendance %>%
left_join(standings,
by = c("team", "team_name", "year"))
View(attendance_join)
attendance_join <- attendance %>%
left_join(standings,
by = c("team", "team_name", "year"))
View(attendance_join)
otro_join <- attendance %>%
left_join(standings,
by = c("team", "team_name", "year"))
attendance_join
## Explore data
```{r}
library(tidyverse)
conexionBD <- odbcConnect("ConexionSQLServer")
sqlFetch(conexionBD, "attendance")
attendance <- data.frame(sqlFetch(conexionBD, "attendance"))
standings <- data.frame(sqlFetch(conexionBD, "standings"))
attendance_join <- attendance %>%
left_join(standings,
by = c("team", "team_name", "year"))
attendance_join %>%
ggplot(aes(team_name,weekly_attendance))
ggplot(aes(team_name,weekly_attendance,
fill =playoffs))
attendance_join %>%
ggplot(aes(team_name,weekly_attendance,
fill =playoffs))
attendance_join %>%
ggplot(aes(team_name,weekly_attendance,
fill =playoffs)) +
geom_boxplot(outlier.alpha = 0.5)
attendance_join %>%
ggplot(aes(team_name,weekly_attendance,
fill =playoffs)) +
geom_boxplot(outlier.alpha = 0.5) +
coord_flip()
attendance_join %>%
ggplot(aes(fct_reorder(team_name,weekly_attendance),
weekly_attendance,
fill =playoffs)) +
geom_boxplot(outlier.alpha = 0.5) +
coord_flip()
attendance_join %>%
filter(!is.na(weekly_attendance)) %>%
ggplot(aes(fct_reorder(team_name,weekly_attendance),
weekly_attendance,
fill =playoffs)) +
geom_boxplot(outlier.alpha = 0.5) +
coord_flip()
View(attendance_join)
attendance_join %>%
distinct(team_name, year, margin_of_victory, playoffs) %>%
ggplot(aes(margin_of_victory, fill = playoffs)) +
geom_histogram(position = "identity", alpha = 0.7)
attendance_join %>%
distinct(team_name, year, margin_of_victory, playoffs) %>%
ggplot(aes(margin_of_victory,wins, fill = playoffs)) +
geom_histogram(position = "identity", alpha = 0.7)
View(attendance)
attendance_join %>%
distinct(team_name, year, margin_of_victory, playoffs) %>%
ggplot(aes(margin_of_victory,wins), fill = playoffs) +
geom_histogram(position = "identity", alpha = 0.7)
attendance_join %>%
distinct(team_name, year, margin_of_victory, playoffs) %>%
ggplot(aes(margin_of_victory, fill = playoffs)) +
geom_histogram(position = "identity", alpha = 0.7)
attendance_join %>%
distinct(team_name, year, margin_of_victory, playoffs) %>%
ggplot(aes(margin_of_victory, fill = wins)) +
geom_histogram(position = "identity", alpha = 0.7)
attendance_join %>%
distinct(team_name, year, margin_of_victory, playoffs) %>%
ggplot(aes(margin_of_victory, fill = points_for)) +
geom_histogram(position = "identity", alpha = 0.7)
attendance_join %>%
distinct(team_name, year, margin_of_victory, playoffs) %>%
ggplot(aes(margin_of_victory, fill = playoffs)) +
geom_histogram(position = "identity", alpha = 0.7)
attendance_join %>%
mutate(week = factor(week)) %>%
ggplot(aes(week, weekly_attendance, fill = week)) +
geom_boxplot(show.legend = FALSE, outlier.alpha = 0.5)
attendance_join %>%
mutate(week = factor(week)) %>%
ggplot(aes(week, weekly_attendance, fill = week)) +
geom_boxplot(show.legend = FALSE, outlier.alpha = 0.9)
attendance_join %>%
mutate(week = factor(week)) %>%
ggplot(aes(week, weekly_attendance, fill = week)) +
geom_boxplot(show.legend = FALSE, outlier.alpha = 0.5)
attendance_diff <- attendance_join %>%
filter(!is.na(weekly_attendance)) %>%
select(weekly_attendance, team_name, year,        week,margin_of_victory,strength_of_schedule,
playoffs)
attendance_diff
install.packages("tidymodels")
library(tidymodels)
attendance_split <- attendance_diff %>%
initial_split(strata = playoffs)
View(attendance_split)
train_model <- training(attendance_split)
View(train_model)
test_model <- testing(attendance_split)
View(train_model)
View(test_model)
linerModel_spec <- linear_reg() %>%
set_engine(engine = "lm")
linearModel_spec <- linear_reg() %>%
set_engine(engine = "lm")
linearModel_spec
linearModel_fit <- linearModel_spec %>%
fit(weekly_attendance ~ ., data = train_model)
linearModel_fit
tidy(linearModel_fit)
tidy(linearModel_fit) %>% arrange(estimate)
tidy(linearModel_fit) %>% arrange(-estimate)
View(train_model)
randomForests_spec <- rand_forest(mode = "regression") %>%
set_engine("ranger")
randomForests_spec
randomForests_fit <- randomForests_spec %>%
fit(weekly_attendance ~ .,
data = train_model)
install.packages("ranger")
library(ranger)
randomForests_fit <- randomForests_spec %>%
fit(weekly_attendance ~ .,
data = train_model)
randomForests_fit
results_train <- linearModel_fit %>%
predict(new_data = train_model) %>%
mutate(truth = train_model$weekly_attendance,
model = "lm") %>%
bind_rows(randomForests_fit %>%
predict(new_data = train_model) %>%
mutate(truth = train_model$weekly_attendance,
model ="rf"))
results_train
prueba <- data.frame(results_train)
View(prueba)
results_test <- linearModel_fit %>%
predict(new_data = test_model) %>%
mutate(truth = test_model$weekly_attendance,
model = "lm") %>%
bind_rows(randomForests_fit %>%
predict(new_data = test_model) %>%
mutate(truth = test_model$weekly_attendance,
model ="rf"))
results_test
results_train %>%
group_by(model) %>%
rmse(truth = truth, estimate = .pred)
results_test %>%
mutate(train = "testing") %>%
bind_rows(results_train %>%
mutate(train = "training")) %>%
ggplot(aes(truth, .pred, color = model)) +
geom_abline(lty = 2, color = "gray80", size = 1.5) +
geom_point(alpha = 0.5) +
facet_wrap(~train)
setwd("C:/Users/Joset/OneDrive - Universidad APEC - Académico/DiplomadoCienciaDatos/R/ExamenFinal")
x <- data.frame(sqlFetch(conexionBD, "cars"))
View(x)
conexionBD <- odbcConnect("ConexionSQLServer")
sqlFetch(conexionBD, "cars")
library(RODBC)
conexionBD <- odbcConnect("ConexionSQLServer")
sqlFetch(conexionBD, "cars")
cars <- data.frame(sqlFetch(conexionBD, "cars"))
View(cars)
regresion_lineal <- lm(price ~ state + country , data = cars)
summary(regresion_lineal)
regresion_lineal2 <- lm(price ~ brand + model + year + title_status + millage +
color, data = cars)
summary(regresion_lineal2)
Datos <- data.frame(brand="ford", model="door", year=2018, title_status="clean vehicle",
millage = 100000,color="black")
predict(regresion_lineal,Datos)
Datos <- data.frame(brand="ford", model="door", year=2018, title_status="clean vehicle",
millage = 100000,color="black")
predict(regresion_lineal2,Datos)
Datos <- data.frame(brand="ford", model="door", year=2018, title_status="clean vehicle",
millage = 100000,color="black")
predict(regresion_lineal2,Datos)
Datos <- data.frame(brand="ford", model="door", year=2018, title_status="clean vehicle",
millage = 50000,color="black")
predict(regresion_lineal2,Datos)
regresion_lineal2 <- lm(price ~ brand + model + year + title_status + millage +
color, data = cars)
Datos <- data.frame(brand="ford", model="door", year=2018, title_status="clean vehicle",
millage = 50000,color="black")
predict(regresion_lineal2,Datos)
#Grafica
grafica = ggplot(x, aes(millage,price))
grafica + geom_point() + geom_smooth(method = "lm", colour="red")
grafica = ggplot(x, aes(millage,price))
library(ggplot2)
grafica = ggplot(x, aes(millage,price))
grafica = ggplot(x, aes(millage,price))
grafica = ggplot(x, aes(millage,price))
grafica = ggplot(cars, aes(millage,price))
grafica + geom_point() + geom_smooth(method = "lm", colour="red")
attendance_join %>%
distinct(team_name, year, margin_of_victory, playoffs) %>%
ggplot(aes(margin_of_victory, fill = playoffs)) +
geom_histogram(position = "identity", alpha = 0.7)
library(tidyverse)
attendance_join %>%
distinct(team_name, year, margin_of_victory, playoffs) %>%
ggplot(aes(margin_of_victory, fill = playoffs)) +
geom_histogram(position = "identity", alpha = 0.7)
attendance_join %>%
filter(!is.na(weekly_attendance)) %>%
ggplot(aes(fct_reorder(team_name,weekly_attendance),
weekly_attendance,
fill =playoffs)) +
geom_boxplot(outlier.alpha = 0.5) +
coord_flip()
attendance_join %>%
distinct(team_name, year, margin_of_victory, playoffs) %>%
ggplot(aes(margin_of_victory, fill = playoffs)) +
geom_histogram(position = "identity", alpha = 0.7)
attendance_join %>%
mutate(week = factor(week)) %>%
ggplot(aes(week, weekly_attendance, fill = week)) +
geom_boxplot(show.legend = FALSE, outlier.alpha = 0.5)
tidy(linearModel_fit)
library(tidymodels)
linearModel_spec <- linear_reg() %>%
set_engine(engine = "lm")
linearModel_fit <- linearModel_spec %>%
fit(weekly_attendance ~ ., data = train_model)
tidy(linearModel_fit)
tidy(linearModel_fit) %>% arrange(estimate)
tidy(linearModel_fit)
tidy(linearModel_fit) %>% arrange(-estimate)
results_train <- linearModel_fit %>%
predict(new_data = train_model) %>%
mutate(truth = train_model$weekly_attendance,
model = "lm") %>%
bind_rows(randomForests_fit %>%
predict(new_data = train_model) %>%
mutate(truth = train_model$weekly_attendance,
model ="rf"))
results_train_dataframe <- data.frame(results_train)
results_test <- linearModel_fit %>%
predict(new_data = test_model) %>%
mutate(truth = test_model$weekly_attendance,
model = "lm") %>%
bind_rows(randomForests_fit %>%
predict(new_data = test_model) %>%
mutate(truth = test_model$weekly_attendance,
model ="rf"))
results_test_dataframe <- data.frame(results_test)
results_train <- linearModel_fit %>%
predict(new_data = train_model) %>%
mutate(truth = train_model$weekly_attendance,
model = "lm") %>%
bind_rows(randomForests_fit %>%
predict(new_data = train_model) %>%
mutate(truth = train_model$weekly_attendance,
model ="rf"))
results_train_dataframe <- data.frame(results_train)
View(results_train)
results_train
View(results_train)
results_train %>%
group_by(model) %>%
rmse(truth = truth, estimate = .pred)
attendance_join %>%
mutate(week = factor(week)) %>%
ggplot(aes(week, weekly_attendance, fill = week)) +
geom_boxplot(show.legend = FALSE, outlier.alpha = 0.5)
results_test <- linearModel_fit %>%
predict(new_data = test_model) %>%
mutate(truth = test_model$weekly_attendance,
model = "lm") %>%
bind_rows(randomForests_fit %>%
predict(new_data = test_model) %>%
mutate(truth = test_model$weekly_attendance,
model ="rf"))
results_test_dataframe <- data.frame(results_test)
results_test_dataframe
results_train <- linearModel_fit %>%
predict(new_data = train_model) %>%
mutate(truth = train_model$weekly_attendance,
model = "lm") %>%
bind_rows(randomForests_fit %>%
predict(new_data = train_model) %>%
mutate(truth = train_model$weekly_attendance,
model ="rf"))
results_train_dataframe <- data.frame(results_train)
results_train_dataframe
View(results_train_dataframe)
View(results_test_dataframe)
results_train %>%
group_by(model) %>%
rmse(truth = truth, estimate = .pred)
results_test %>%
group_by(model) %>%
rmse(truth = truth, estimate = .pred)
results_test %>%
mutate(train = "testing") %>%
bind_rows(results_train %>%
mutate(train = "training")) %>%
ggplot(aes(truth, .pred, color = model)) +
geom_abline(lty = 2, color = "gray80", size = 1.5) +
geom_point(alpha = 0.5) +
facet_wrap(~train)
